(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{166:function(e,t,s){"use strict";s.r(t);var n=s(0),a=Object(n.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[e._m(0),e._v(" "),s("p",[e._v("webpack是一款前端的打包工具，用于将大量的JS文件，CSS文件等，按项目的要求（根据配置文件进行配置）,压缩打包成一个或多个固定的JS文件。这样做的好处是大大减少的项目的大小,避免重复加载,实现按需加载等。webpack能大大优化前端性能。")]),e._v(" "),s("p",[e._v("需要安装webpack webpack-cli")]),e._v(" "),e._m(1),e._m(2),e._v(" "),e._m(3),e._m(4),e._v(" "),e._m(5),e._m(6),e._v(" "),e._m(7),s("p",[e._v("lodash是一个前端的工具库，用来处理字符串，数组等操作的util，"),s("a",{attrs:{href:"https://www.lodashjs.com/docs/4.17.5.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("使用说明"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("接下来，我们开始写html\n如果不使用webpack,我们过去的写法是 将src/index.js顶部的import去掉,在html中使用<script>标签引入两个js文件。这样做的缺点是,不易管理js,css文件等,并且浏览器会根据js文件的引入顺序进行执行,一旦顺序没有放对,浏览器将无法正常运行网页。\n现在我们来使用webpack")]),e._v(" "),e._m(8),e._m(9),e._v(" "),e._m(10),s("p",[e._v("webpack需要在根目录建立一个固定的配置文件，名为webpack.config.js")]),e._v(" "),e._m(11),s("p",[e._v("编辑webpack.config.js")]),e._v(" "),e._m(12),e._m(13),e._v(" "),e._m(14),s("p",[e._v("最后，执行npm run build即可开始webpack的打包，打包完成后，可以看见在dist目录下生成了我们需要的bundle.js文件。改文件自动打包了lodash依赖和css依赖，我们的html只需要引用这个bundle.js文件，就已经集成了我们所需要的js依赖。")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"初识webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初识webpack","aria-hidden":"true"}},[this._v("#")]),this._v(" 初识Webpack")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("mkdir demo && cd demo\nnpm init -y\nnpm install webpack webpack-cli -D\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("安装完成后，我们将创建目录结构和文件如下:"),t("br"),this._v("\nproject")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("demo\n|- package.json\n|- index.html\n|- src\n  |- index.js\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("接着在index.js中写入我们的代码"),t("br"),this._v("\nsrc/index.js")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("import _ from 'lodash'\nimport './style.css'\nfunction componnet () {\n  var ele = document.createElement('div')\n\n  ele.innerHTML = _.join(['Hello', 'webpack'], '~')\n  ele.classList.add('hello')\n  return ele\n}\n\ndocument.body.appendChild(componnet())\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("写入css代码"),t("br"),this._v("\nsrc/style.css")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v(".hello{\n  color: red;\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <meta http-equiv="X-UA-Compatible" content="ie=edge">\n  <title>demo2 Asset Management</title>\n</head>\n<body>\n  <script src="./bundle.js"><\/script>\n</body>\n</html>\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在html中只需要引入一个js文件即可。这个bundle.js文件，就是我们使用webpack将所有依赖的js,css等打包成的一个js文件。"),t("br"),this._v("\n在开始配置打包之前，我们先将项目的目录整理一下，使其更接近于生产环境。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("demo\n|- dist\n  |- index.html\n|- src\n  |- index.js\n  |- style.css\n|- package.json\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("demo\n|- webpack.config.js\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("const path = require('path')\n\nmodule.exports = {\n  entry: './src/index.js', // 入口文件。表示从哪一个js开始打包。\n  output: {                //  输出文件 \n    filename: 'bundle.js', // 输出文件名称\n    path: path.resolve(__dirname, 'dist') // 输出的js路径\n  },\n  module: {  // webpack的依赖组件\n    rules: [  // webpack采用style-loader 和 css-loader共同作用为html添加css样式\n      {\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader']\n      },\n    ]\n  }\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("webpack的命令可以直接在shell窗口中输入webpack 即可开始打包。但是在生产环境中，通常通过配置npm的配置文件，来执行自定义的脚本。"),t("br"),this._v("\n编辑package.json")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('···\n"scripts": {\n    "build": "webpack"\n  },\n···\n')])])])}],!1,null,null,null);a.options.__file="1.md";t.default=a.exports}}]);